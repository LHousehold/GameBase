import { app, output } from "@azure/functions";
import { v4 as uuidv4 } from "uuid";

`
Creating a new match.
Doesn't care whether the player is in another match already.
ID is generated by server, not frontend.

Player submits their name and is assigned an ID.

The following docs are created:

Metadata, Secrets, Player 1.
`;

const cosmosOutput = output.cosmosDB({
  databaseName: "householdDb",
  containerName: "gamesContent",
  createIfNotExists: false,
  partitionKey: "/matchId",
  connection: "MyAccount_COSMOSDB",
});

app.http("matchCreate", {
  methods: ["POST"],
  authLevel: "anonymous",
  extraOutputs: [cosmosOutput],
  route: "match",
  handler: async (request, context) => {
    const { playerName } = await request.json();

    if (!playerName) {
      return {
        status: 400,
        body: JSON.stringify({ message: "Player Name not provided" }),
      };
    }

    const playerId = uuidv4();
    const playerSecret = uuidv4();
    const matchId = uuidv4();

    const matchDoc = {
      id: `${matchId}-doc`,
      matchId,
      status: "pending",
      ownerId: playerId,
      playersIds: [playerId],
      playerCountMax: 2,
    };

    const matchSecretsDoc = {
      id: `${matchId}-secrets`,
      matchId,
      playerSecrets: { [playerId]: playerSecret },
    };

    const playerDoc = {
      id: playerId,
      matchId,
      name: playerName,
    };

    const outputs = [matchDoc, matchSecretsDoc, playerDoc];

    const response = {
      body: JSON.stringify({ matchDoc, playerDoc }),
      cookies: [
        {
          name: "playerSecret",
          value: playerSecret,
          maxAge: 60 * 10,
          httpOnly: true,
          path: "/",
        },
      ],
    };

    context.extraOutputs.set(cosmosOutput, outputs);

    return response;
  },
});
