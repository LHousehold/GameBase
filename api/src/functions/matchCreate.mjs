import { app } from "@azure/functions";
import { v4 as uuidv4 } from "uuid";
import { Surreal, RecordId } from "surrealdb";

// azure | azure123pass!
`
Creating a new match.
Doesn't care whether the player is in another match already.
ID is generated by server, not frontend.

Player submits their name and is assigned an ID.

The following docs are created:

Metadata, Secrets, Player 1.
`;

app.http("matchCreate", {
  methods: ["POST"],
  authLevel: "anonymous",
  route: "match",
  handler: async (request, context) => {
    const { playerName } = await request.json();

    if (!playerName) {
      return {
        status: 400,
        body: JSON.stringify({ message: "Player Name not provided" }),
      };
    }

    const playerId = uuidv4();
    const playerSecret = uuidv4();
    const matchId = uuidv4();

    const playerRecordId = new RecordId('player', playerId);
    const matchRecordId = new RecordId('match', matchId);
    const secretRecordId = new RecordId('secret', matchId);

    const db = new Surreal();

    await db.connect("wss://householddb-06aiihsivpr4b71h3h9obqd06o.aws-use1.surreal.cloud", {
      namespace: "games",
      database: "games",
      auth: {
        username: "azure",
        password: "azure123pass!",
      }
    });

    await db.create(matchRecordId, {
      status: "pending",
      ownerId: playerRecordId,
      playersIds: [playerRecordId],
      playerCountMax: 2,
    });

    await db.create(secretRecordId, {
      matchId: matchRecordId,
      playerSecrets: [ playerRecordId ],
    });

    await db.create(playerRecordId, {
      matchId: matchRecordId,
      name: playerName,
    });

    await db.close();

    const response = {
      body: JSON.stringify({
        matchId,
        playerId
      }),
      cookies: [
        {
          name: "playerSecret",
          value: playerSecret,
          maxAge: 60 * 10,
          httpOnly: true,
          path: "/",
        },
      ],
    };

    // context.extraOutputs.set(cosmosOutput, outputs);

    return response;
  },
});
